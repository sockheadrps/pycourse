---
title: Defining Data
description: Primitive data types
date: '2024-11-23'
categories:
  - OOP
published: true
index: 1
---

<script>
  import DefinitionList from '$components/DefinitionList.svelte';
  import Terminal from '$components/Terminal.svelte'
  import DefinitionListEx from '$components/DefinitionListEx.svelte'
  import FlashCard from '$components/FlashCard.svelte'
  import EmojiList from '$components/EmojiList.svelte';
  import Quiz from '$components/Quiz.svelte';
</script>


# Primitive Data Types

Referring back to our laptop abstraction, we can see there is static data associated with our model. When tied to an abstraction,
 this data is referred to as **properties** or **attributes**. By looking beyond the naming and focusing on the data itself, 
 we notice one property has been set to a value—currently “Off.”
 <br>

 ```javascript
Laptop:
  Properties:
    power_state = Off
 ```

Since this is pseudo-code (not valid Python syntax), describing a property with states “off” or “on” is understandable. 
However, in Python, we typically represent such a property with a **boolean**, which can only be True or False.

Below are some standard, primitive data types in Python:

# Python Data Types

<DefinitionList items={[
  { term: 'Boolean', definition: 'Can only be True or False.', extra: 'Used for logical operations. True and False are reserved keywords that represent the two Boolean values. They are used for logical operations and comparisons, and because theyre keywords, you cannot use them as identifiers (such as variable or class names). Also, they are not strings (they arent enclosed in quotes) and are case-sensitive.' },
  { term: 'Integer', definition: 'Any whole number (without a decimal). For example: 0, -5, or 42.', extra: 'Integers in Python are whole numbers (without a fractional or decimal component) that belong to the built-in int type. They can be positive, negative, or zero, and are used for arithmetic operations, indexing, and many other numerical tasks. Unlike strings, integers arent enclosed in quotes.' },
  { term: 'String', definition: 'Represents text.', extra: 'Strings in Python represent textual data. They are sequences of characters enclosed in quotes (single, double, or triple) and are immutable, meaning their content cannot be changed once created.' },
  { term: 'Float', definition: 'Any number that includes a decimal point (e.g., 70.0 or 8.88888).', extra: 'Floats in Python represent real numbers with a fractional component. They are used for arithmetic involving non-integer values and are typically written with a decimal point' },
  { term: 'None', definition: 'Represents the absence of a value, Distinct from 0 or false.', extra: 'None in Python is a special constant that represents the absence of a value. It is the sole instance of the NoneType and is used to indicate that a variable, function, or expression does not have any value. Unlike other data types such as integers, floats, or strings, None is not enclosed in quotes and cannot be used as a placeholder for actual data—it specifically denotes "no value" or "nothing here."' }
]} />



We can illustrate these properties by imagining a laptop with attributes for power state, CPU cores, brand name, battery life, and more. Most of the data we interact with in Python will use these simple, foundational data types.



<FlashCard
  question="How would you create an abstraction of the following object description using Python data types?"
  description={[
    "The object is a laptop.",
    "The laptop is off.",
    "The laptop is a Dell.", 
    "The laptop has 4 cores.",
    "The laptop battery life (unit of measurement is implied) is 2.5",
    "The laptop is broken."
  ]}
  code={`Laptop:
  Properties:
    power_state = False
    cpu_cores = 4
    brand = "Dell"
    hours_of_battery_life = 2.5
    broken = True`}
  lang="python" />

Those are the simplest representation of data that python has, and will make up the majority of the data you will interact with.
As you can see, the representation of data as a single data point is actually fairly simple representing data as a single, simple data point is straightforward, and these primitive data types form the foundation of Python programming.

# Python Composite Data Types
Beyond these primitive types, there are also **composite** data types like **lists**, which can store multiple values in a single variable (e.g., numbers, strings, or both). 
Additionally, there are other data types, such as sequences, or lists. Lists and sequences represent some data that has multiple seperate 
values, but the values need to be tightly coupled. To implement this, we literally list (insided square brackets) the data.

```python
list_of_letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']
```

Python lists are not limited to a single type. Its completely valid to have a mix of types in a list.

```python
list_of_important_data = ['A', 1, 'B', 2, 'C', 3, True, None, 4.5]
```

## Other Composite Data Types
<DefinitionListEx items={[
  { 
    term: 'Tuple', 
    definition: 'An immutable, ordered collection of values, defined with parentheses.', 
    extra: 'Tuples in Python are immutable sequences used to store a collection of items. They are defined using parentheses and can contain mixed data types. They are hashable if all their elements are hashable.', 
    code: 'my_tuple = (1, "A")'
  },
  { 
    term: 'Dictionary', 
    definition: 'A collection of key-value pairs, defined with curly braces.', 
    extra: 'Dictionaries in Python are mutable, unordered collections that map unique keys to values. They allow fast lookups, updates, and deletions. Typically, the keys are strings, and the values can be any type', 
    code: 'my_dict = {"name": "Alice", "age": 30}'
  },
  { 
    term: 'Set', 
    definition: 'An unordered collection of unique elements, defined with curly braces or the set() constructor.', 
    extra: 'Sets in Python are mutable, unordered collections that store only unique elements. They support mathematical set operations, such as union, intersection, and difference.', 
    code: 'my_set = {1, 2, 3, 4}'
  }
]} />


# Variables
In Python, variables are symbolic names that refer to objects stored in memory. 
They act as containers for data and are created when you assign a value to them using the assignment operator (=). 
For example, writing x = 10 creates a variable named x that stores the integer value 10.

```python
# Boolean: represents the power state of a laptop (True for on, False for off)
power_state = False

# Integer: number of CPU cores
cpu_cores = 4

# String: brand name of the laptop, You can use single or double quotes.
brand = "Dell"
# or
brand = 'Dell'

# Float: battery life (in hours)
battery_life = 2.5

# Boolean: indicates if the laptop is broken
is_broken = True

# None: represents an unknown or missing value
warranty_expiration = None
```

<Terminal>
  <EmojiList>
    <li>
      <strong>Dynamic Typing: </strong>
      <ul>
        <li>You do not need to declare a variable’s type explicitly; Python automatically determines the data type based on the assigned value.</li>
      </ul>
    </li>

    <li>
      <strong>Naming Conventions:</strong>
      <ul>
        <li>Variable names should start with a letter (a–z, A–Z) or an underscore (_), followed by letters, digits, or underscores. You may not use reserved keywords (like True, False, or None) as variable names.</li>
      </ul>
    </li>

    <li>
      <strong>Mutability:</strong>
      <ul>
        <li>The behavior of a variable depends on the type of object it references. For instance, integers and strings are immutable, meaning that once created, their values cannot be changed. In contrast, lists and dictionaries are mutable, so their contents can be modified after assignment.</li>
      </ul>
    </li>
  </EmojiList>
</Terminal>

Variables are a fundamental concept in Python programming, allowing you to store, retrieve, 
and manipulate data as your program executes.


<Quiz quiz_index=0></Quiz>