{
  "title": "Complete FastAPI Chat App Flow",
  "description": "Arrow keys to focus step elements",
  "phases": [
    {
      "phase": 1,
      "title": "User Registration",
      "flow_title": "1. User Registration Process",
      "steps": [
        {
          "step": 1,
          "title": "User Visits Registration Page",
          "description": "User navigates to /register endpoint",
          "location": {
            "file": "main.py → register_page()",
            "type": "server"
          },
          "step_type": "normal"
        },
        {
          "step": 2,
          "title": "User Fills Registration Form",
          "description": "Username and password input",
          "location": {
            "file": "register.html template",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 3,
          "title": "JavaScript Validates Form",
          "description": "Client-side validation (required fields, password 4+ chars)",
          "location": {
            "file": "static/js/register.js → register()",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 4,
          "title": "Send Registration Request",
          "description": "POST /api/v1/auth/register with user data",
          "location": {
            "file": "static/js/register.js → fetch()",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 5,
          "title": "Check Username Availability",
          "description": "Query database for existing username",
          "location": {
            "file": "app/routes.py → get_user_by_username()",
            "type": "server"
          },
          "step_type": "database"
        },
        {
          "step": 6,
          "title": "Username Available?",
          "description": "Check if username already exists",
          "location": {
            "file": "app/routes.py → validation logic",
            "type": "server"
          },
          "step_type": "decision"
        },
        {
          "step": 7,
          "title": "Hash Password with bcrypt",
          "description": "Convert plain password to secure hash",
          "location": {
            "file": "app/auth.py → get_password_hash()",
            "type": "server"
          },
          "step_type": "security"
        },
        {
          "step": 8,
          "title": "Save User to Database",
          "description": "Insert new user record with hashed password",
          "location": {
            "file": "app/database.py → create_user()",
            "type": "server"
          },
          "step_type": "database"
        },
        {
          "step": 9,
          "title": "Registration Successful",
          "description": "Return user data (without password)",
          "location": {
            "file": "app/routes.py → register() → response",
            "type": "server"
          },
          "step_type": "success"
        },
        {
          "step": 10,
          "title": "Redirect to Login Page",
          "description": "User can now login with new credentials",
          "location": {
            "file": "static/js/register.js → redirectTo('/login')",
            "type": "client"
          },
          "step_type": "normal"
        }
      ]
    },
    {
      "phase": 2,
      "title": "User Authentication",
      "flow_title": "2. User Login & JWT Token Generation",
      "steps": [
        {
          "step": 1,
          "title": "User Visits Login Page",
          "description": "User navigates to /login endpoint",
          "location": {
            "file": "main.py → login_page()",
            "type": "server"
          },
          "step_type": "normal"
        },
        {
          "step": 2,
          "title": "User Enters Credentials",
          "description": "Username and password input",
          "location": {
            "file": "login.html template",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 3,
          "title": "Send Login Request",
          "description": "POST /api/v1/auth/login with form data",
          "location": {
            "file": "static/js/login.js → login()",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 4,
          "title": "Query Database for User",
          "description": "Find user by username",
          "location": {
            "file": "app/routes.py → get_user_by_username()",
            "type": "server"
          },
          "step_type": "database"
        },
        {
          "step": 5,
          "title": "User Exists?",
          "description": "Check if username is found",
          "location": {
            "file": "app/routes.py → validation logic",
            "type": "server"
          },
          "step_type": "decision"
        },
        {
          "step": 6,
          "title": "Verify Password Hash",
          "description": "Compare input password with stored hash",
          "location": {
            "file": "app/auth.py → verify_password()",
            "type": "server"
          },
          "step_type": "security"
        },
        {
          "step": 7,
          "title": "Password Correct?",
          "description": "bcrypt verification result",
          "location": {
            "file": "app/routes.py → validation logic",
            "type": "server"
          },
          "step_type": "decision"
        },
        {
          "step": 8,
          "title": "Generate JWT Token",
          "description": "Create access token with user ID and expiration",
          "location": {
            "file": "app/auth.py → create_access_token()",
            "type": "server"
          },
          "step_type": "security"
        },
        {
          "step": 9,
          "title": "Return JWT Token",
          "description": "Send token to client",
          "location": {
            "file": "app/routes.py → login() → response",
            "type": "server"
          },
          "step_type": "success"
        },
        {
          "step": 10,
          "title": "Store Token in localStorage",
          "description": "Client saves token for future requests",
          "location": {
            "file": "static/js/login.js → setToken()",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 11,
          "title": "Redirect to Chat Page",
          "description": "User is now authenticated and ready to chat",
          "location": {
            "file": "static/js/login.js → redirectTo('/chat')",
            "type": "client"
          },
          "step_type": "normal"
        }
      ]
    },
    {
      "phase": 3,
      "title": "Chat Initialization",
      "flow_title": "3. Chat Page Initialization",
      "steps": [
        {
          "step": 1,
          "title": "User Visits Chat Page",
          "description": "Navigate to /chat endpoint",
          "location": {
            "file": "main.py → chat_page()",
            "type": "server"
          },
          "step_type": "normal"
        },
        {
          "step": 2,
          "title": "JavaScript Checks Authentication",
          "description": "Verify JWT token exists in localStorage",
          "location": {
            "file": "static/js/chat.js → initializeChat()",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 3,
          "title": "Token Exists?",
          "description": "Check if user is logged in",
          "location": {
            "file": "static/js/common.js → isAuthenticated()",
            "type": "client"
          },
          "step_type": "decision"
        },
        {
          "step": 4,
          "title": "Get Current User Info",
          "description": "GET /api/v1/auth/me with JWT token",
          "location": {
            "file": "static/js/chat.js → apiRequest('/auth/me')",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 5,
          "title": "Server Validates JWT Token",
          "description": "Decode and verify token signature",
          "location": {
            "file": "app/auth.py → verify_token()",
            "type": "server"
          },
          "step_type": "security"
        },
        {
          "step": 6,
          "title": "Fetch User from Database",
          "description": "Get user details by ID from token",
          "location": {
            "file": "app/database.py → get_user()",
            "type": "server"
          },
          "step_type": "database"
        },
        {
          "step": 7,
          "title": "Update UI with User Info",
          "description": "Display username in sidebar",
          "location": {
            "file": "static/js/chat.js → update username display",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 8,
          "title": "Initialize WebSocket Connection",
          "description": "Ready to establish real-time connection",
          "location": {
            "file": "static/js/chat.js → connectWebSocket()",
            "type": "client"
          },
          "step_type": "success"
        }
      ]
    },
    {
      "phase": 4,
      "title": "Real-Time Chat",
      "flow_title": "4. WebSocket Connection & Chat",
      "steps": [
        {
          "step": 1,
          "title": "Create WebSocket Connection",
          "description": "ws://localhost:8000/api/v1/chat/ws/{token}",
          "location": {
            "file": "static/js/chat.js → new WebSocket()",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 2,
          "title": "Server Accepts Connection",
          "description": "WebSocket handshake completed",
          "location": {
            "file": "app/routes.py → websocket_endpoint()",
            "type": "server"
          },
          "step_type": "normal"
        },
        {
          "step": 3,
          "title": "Server Validates Token",
          "description": "Verify JWT token from URL",
          "location": {
            "file": "app/auth.py → verify_token()",
            "type": "server"
          },
          "step_type": "security"
        },
        {
          "step": 4,
          "title": "Token Valid?",
          "description": "Check authentication status",
          "location": {
            "file": "app/routes.py → websocket_endpoint() → validation",
            "type": "server"
          },
          "step_type": "decision"
        },
        {
          "step": 5,
          "title": "Add User to Connection Manager",
          "description": "Store WebSocket connection",
          "location": {
            "file": "app/utils/websocket_manager.py → connect()",
            "type": "server"
          },
          "step_type": "normal"
        },
        {
          "step": 6,
          "title": "Broadcast User Joined Animation",
          "description": "Notify all users about new connection",
          "location": {
            "file": "app/utils/websocket_manager.py → broadcast_message()",
            "type": "server"
          },
          "step_type": "normal"
        },
        {
          "step": 7,
          "title": "Request Online Users List",
          "description": "Get current online users",
          "location": {
            "file": "static/js/chat.js → loadOnlineUsers()",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 8,
          "title": "Connection Established ✓",
          "description": "Ready for real-time messaging",
          "location": {
            "file": "static/js/chat.js → ws.onopen",
            "type": "client"
          },
          "step_type": "success"
        }
      ]
    },
    {
      "phase": 5,
      "title": "Message Flow",
      "flow_title": "5. Real-Time Message Flow",
      "steps": [
        {
          "step": 1,
          "title": "User Types Message",
          "description": "Input text in chat interface",
          "location": {
            "file": "chat.html → message input field",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 2,
          "title": "User Sends Message",
          "description": "Click send or press Enter",
          "location": {
            "file": "static/js/chat.js → message form submit",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 3,
          "title": "Create Message Object",
          "description": "Format with type, content, timestamp",
          "location": {
            "file": "static/js/chat.js → create message JSON",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 4,
          "title": "Send via WebSocket",
          "description": "Transmit message to server",
          "location": {
            "file": "static/js/chat.js → ws.send()",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 5,
          "title": "Server Processes Message",
          "description": "Validate and format message",
          "location": {
            "file": "app/utils/websocket_manager.py → handle_websocket_message()",
            "type": "server"
          },
          "step_type": "normal"
        },
        {
          "step": 6,
          "title": "Broadcast to All Users",
          "description": "Send message to all connected clients",
          "location": {
            "file": "app/utils/websocket_manager.py → broadcast_message()",
            "type": "server"
          },
          "step_type": "normal"
        },
        {
          "step": 7,
          "title": "Each Client Receives Message",
          "description": "WebSocket message event triggered",
          "location": {
            "file": "static/js/chat.js → ws.onmessage",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 8,
          "title": "JavaScript Processes Message",
          "description": "Parse and determine message type",
          "location": {
            "file": "static/js/chat.js → handleWebSocketMessage()",
            "type": "client"
          },
          "step_type": "normal"
        },
        {
          "step": 9,
          "title": "Display Message in Chat",
          "description": "Add message to chat interface",
          "location": {
            "file": "static/js/chat.js → addMessage()",
            "type": "client"
          },
          "step_type": "success"
        }
      ]
    }
  ]
}